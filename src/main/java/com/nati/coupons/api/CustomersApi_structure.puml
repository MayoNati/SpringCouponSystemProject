@startuml

/' diagram meta data start
config=StructureConfiguration;
{
  "projectClassification": {
    "searchMode": "OpenProject", // OpenProject, AllProjects
    "includedProjects": "",
    "pathEndKeywords": "*.impl",
    "isClientPath": "",
    "isClientName": "",
    "isTestPath": "",
    "isTestName": "",
    "isMappingPath": "",
    "isMappingName": "",
    "isDataAccessPath": "",
    "isDataAccessName": "",
    "isDataStructurePath": "",
    "isDataStructureName": "",
    "isInterfaceStructuresPath": "",
    "isInterfaceStructuresName": "",
    "isEntryPointPath": "",
    "isEntryPointName": ""
  },
  "graphRestriction": {
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step
    "removeByAnnotation": "",
    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done
    "removeByClassName": "",
    "cutMappings": false,
    "cutEnum": true,
    "cutTests": true,
    "cutClient": true,
    "cutDataAccess": false,
    "cutInterfaceStructures": false,
    "cutDataStructures": false,
    "cutGetterAndSetter": true,
    "cutConstructors": true
  },
  "graphTraversal": {
    "forwardDepth": 6,
    "backwardDepth": 6,
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "hideMappings": false,
    "hideDataStructures": false,
    "hidePrivateMethods": true,
    "hideInterfaceCalls": true, // indirection: implementation -> interface (is hidden) -> implementation
    "onlyShowApplicationEntryPoints": false // root node is included
  },
  "details": {
    "aggregation": "GroupByClass", // ByClass, GroupByClass, None
    "showClassGenericTypes": true,
    "showMethods": true,
    "showMethodParameterNames": true,
    "showMethodParameterTypes": true,
    "showMethodReturnType": true,
    "showPackageLevels": 2,
    "showDetailedClassStructure": true
  },
  "rootClass": "com.nati.coupons.api.CustomersApi"
}
diagram meta data end '/



digraph g {
    rankdir="TB"
    splines=polyline
    

'nodes 
subgraph cluster_3373928 { 
   	label=nati
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   subgraph cluster_501469319 { 
   	label=coupons
	labeljust=l
	fillcolor="#d8d8d8"
	style=filled
   
   ConnectionPool837948521[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)ConnectionPool</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+   availableConnections: Vector&lt;Connection&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >+   busyConnections: Vector&lt;Connection&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   connectionPending: boolean [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   driver: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   maxConnections: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   password: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   url: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   username: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   waitIfBusy: boolean [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ closeAllConnections()</TD></TR>
<TR><TD ALIGN="LEFT" >- closeConnections(connections: Vector&lt;Connection&gt;)</TD></TR>
<TR><TD ALIGN="LEFT" >+ closeDatabaseResources(connection: Connection, preparedStatement: PreparedStatement)</TD></TR>
<TR><TD ALIGN="LEFT" >+ free(connection: Connection)</TD></TR>
<TR><TD ALIGN="LEFT" >- makeBackgroundConnection()</TD></TR>
<TR><TD ALIGN="LEFT" >- makeNewConnection(): Connection</TD></TR>
<TR><TD ALIGN="LEFT" >+ run()</TD></TR>
<TR><TD ALIGN="LEFT" >+ totalConnections(): int</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

CustomerController1113940164[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)CustomerController</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   customerDao: CustomerDAO [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ createCustomer(customer: Customer)</TD></TR>
<TR><TD ALIGN="LEFT" >+ getCustomerById(id: long): Customer</TD></TR>
<TR><TD ALIGN="LEFT" >+ getCustomerByNameAndPassword(name: String, password: String): Customer</TD></TR>
<TR><TD ALIGN="LEFT" >- isCustomerDetailsValid(customer: Customer): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >- isIdExist(id: long): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >- isPasswordValid(password: String): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ login(userName: String, userPassword: String): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ removeCustomer(id: long)</TD></TR>
<TR><TD ALIGN="LEFT" >+ updateCustomer(customer: Customer)</TD></TR>
<TR><TD ALIGN="LEFT" >- validateNameExistOfCustomer(name: String): boolean</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

CustomerDAO535161224[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)CustomerDAO</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   con: ConnectionPool [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ createCustomer(customer: Customer)</TD></TR>
<TR><TD ALIGN="LEFT" >- extractCustomerFromResultSet(resultSet: ResultSet): Customer</TD></TR>
<TR><TD ALIGN="LEFT" >+ getCustomerById(customerId: long): Customer</TD></TR>
<TR><TD ALIGN="LEFT" >+ getCustomerByNameAndPassword(name: String, password: String): Customer</TD></TR>
<TR><TD ALIGN="LEFT" >+ isCustomerNameExist(customerName: String): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ isIdExist(id: long): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ login(requiredCustomerName: String, requiredCustomerPassword: String): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ removeAllPursachesCoupons(customerId: long)</TD></TR>
<TR><TD ALIGN="LEFT" >+ removeCustomerById(id: long)</TD></TR>
<TR><TD ALIGN="LEFT" >+ updateCustomer(customer: Customer)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

CustomersApi535163648[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)CustomersApi</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   customerController: CustomerController [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ createCustomer(newCustomer: Customer)</TD></TR>
<TR><TD ALIGN="LEFT" >+ getCustomerById(id: long): Customer</TD></TR>
<TR><TD ALIGN="LEFT" >+ getCustomerByNameAndPassword(name: String, password: String): Customer</TD></TR>
<TR><TD ALIGN="LEFT" >+ removeCustomer(id: long)</TD></TR>
<TR><TD ALIGN="LEFT" >+ updateCustomer(customer: Customer)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 
} 

'edges    
CustomerController1113940164 -> CustomerDAO535161224[label="customerDao
[0..1]"];
CustomerDAO535161224 -> ConnectionPool837948521[label="con
[0..1]"];
CustomersApi535163648 -> CustomerController1113940164[label="customerController
[0..1]"];
    
}
@enduml